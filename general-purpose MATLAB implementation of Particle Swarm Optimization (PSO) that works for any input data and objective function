clc;
clear all;

% ---------- PSO Parameters ----------
nVar = 4;                 % Number of decision variables (dimensions)
VarSize = [1 nVar];       % Size of decision variables matrix
VarMin = -10;             % Lower bound
VarMax = 10;              % Upper bound

MaxIt = 100;              % Maximum number of iterations
nPop = 30;                % Population size (number of particles)

w = 0.9;                  % Inertia weight
wdamp = 0.99;             % Damping ratio of inertia weight
c1 = 2;                   % Personal learning coefficient
c2 = 2;                   % Global learning coefficient

% ---------- Initialization ----------
empty_particle.Position = [];
empty_particle.Velocity = [];
empty_particle.Cost = [];
empty_particle.Best.Position = [];
empty_particle.Best.Cost = [];

particle = repmat(empty_particle, nPop, 1);
GlobalBest.Cost = inf;

for i = 1:nPop
    % Initialize Position
    particle(i).Position = unifrnd(VarMin, VarMax, VarSize);
    
    % Initialize Velocity
    particle(i).Velocity = zeros(VarSize);
    
    % Evaluation
    particle(i).Cost = YourObjectiveFunction(particle(i).Position);
    
    % Personal Best
    particle(i).Best.Position = particle(i).Position;
    particle(i).Best.Cost = particle(i).Cost;
    
    % Global Best
    if particle(i).Best.Cost < GlobalBest.Cost
        GlobalBest = particle(i).Best;
    end
end

% ---------- PSO Main Loop ----------
BestCost = zeros(MaxIt, 1);

for it = 1:MaxIt
    for i = 1:nPop
        % Update Velocity
        particle(i).Velocity = w*particle(i).Velocity ...
            + c1*rand(VarSize).*(particle(i).Best.Position - particle(i).Position) ...
            + c2*rand(VarSize).*(GlobalBest.Position - particle(i).Position);
        
        % Update Position
        particle(i).Position = particle(i).Position + particle(i).Velocity;
        
        % Apply Bounds
        particle(i).Position = max(particle(i).Position, VarMin);
        particle(i).Position = min(particle(i).Position, VarMax);
        
        % Evaluation
        particle(i).Cost = YourObjectiveFunction(particle(i).Position);
        
        % Personal Best Update
        if particle(i).Cost < particle(i).Best.Cost
            particle(i).Best.Position = particle(i).Position;
            particle(i).Best.Cost = particle(i).Cost;
            
            % Global Best Update
            if particle(i).Best.Cost < GlobalBest.Cost
                GlobalBest = particle(i).Best;
            end
        end
    end
    
    % Store Best Cost
    BestCost(it) = GlobalBest.Cost;
    
    % Display Iteration Info
    fprintf('Iteration %d: Best Cost = %.6f\n', it, BestCost(it));
    
    % Dampen Inertia Weight
    w = w * wdamp;
end

% ---------- Results ----------
disp('Best Solution Found:');
disp(GlobalBest.Position);
disp(['Minimum Cost: ', num2str(GlobalBest.Cost)]);

plot(BestCost, 'LineWidth', 2);
xlabel('Iteration');
ylabel('Best Cost');
grid on;
title('PSO Convergence Curve');
