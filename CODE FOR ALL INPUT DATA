%%initialization of pvition
%finding out random values                             
r1=rand(ns,nv);                             %random numbers
disp('random values:');
disp(r1);


%converting random values into parameter values
pv=zeros(ns,nv);
for i=1:ns
    pv(i,:)=round(lb(1,:)+r1(i,:).*(ub(1,:)-lb(1,:)));   %pvition
end
disp(' Initial pvition values:');
disp(pv);
vel=0.1.*pv;                                             %velocity
disp(' Initial velocity values:');
disp(vel);


 [f0] =[evuci1(pv)]; 

disp('f0');
disp(f0);
% o1=w1.*f0(:,1)+w2.*f0(:,2)+w3.*f0(:,3);
o1=f0;
sol0=[pv o1];    %concatenation of two matrices
disp('sol0');
disp(sol0);
[fmin0,index0]=min(f0); 
 pbest=pv; % initial pbest
 disp('initial pbest:');
 disp(pbest);
 gbest=pv(index0,:); % initial gbest
 disp('initial gbest:');
 disp(gbest);
 
 % pso velocity updates
 best=zeros(nitr,1+nv); 
 ite=1;
tol=0.000001;
alpha=1;
fprev=zeros(ns,1);
 while alpha>tol
 w=wmax-(wmax-wmin)*ite/nitr; % update inertial weight
 for i=1:ns
 for j=1:nv
 vel(i,j)=round(w*vel(i,j)+c1*rand()*(pbest(i,j)-pv(i,j))+c2*rand()*(gbest(1,j)-pv(i,j)));
  pv(i,j)=round(pv(i,j)+vel(i,j));
 end
 end
 disp('updated velocity values:');
 disp(vel);
 disp('updated pvition values;');
 disp(pv);
 % handling boundary violations
 for i=1:ns
 for j=1:nv
 if pv(i,j)<lb(j)
 pv(i,j)=lb(j);
 elseif pv(i,j)>ub(j)
 pv(i,j)=ub(j);
 end
 end
 disp('new pvition values after checking limits:');
 disp(pv); 
 end
 
 % evaluating fitness

[f1] =[evuci1(pv)]; 
 
 disp('f1:');
  disp(f1);
%   o2=w1.*f1(:,1)+w2.*f1(:,2)+w3.*f1(:,3);
o2=f1;
 sol1=[pv o2];
 disp('sol1');


% updating pbest and fitness
 for i=1:ns
 if o1<o2
     pbest(i,:)=pv(i,:);
 o1=o2;
 end
 end

 disp('updated pbest');
 disp(pbest);
 disp('updated fitness');
 disp(o1);
 [fminupd,index]=min(o1); % finding out the best particle
 best(ite,:)=fminupd; % storing best fitness
 
  
 % updating gbest and best fitness
 if fminupd<fmin0
 gbest=pbest(index,:);
 fmin0=fminupd;
 end
disp('updated gbest');
 disp(gbest);
 disp('updated fitness');
 disp(fminupd);               %pso ends
   fpres=o1;
   alpha=min(abs(fpres-fprev));
 
   fprev=fpres;
 ite=ite+1;
end
